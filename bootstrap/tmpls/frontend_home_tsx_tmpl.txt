import { api } from "./api_client.ts";
import { addClientLoader, useLoaderData } from "./app_utils.tsx";
import type { RouteProps } from "./river.gen.ts";

// Here's how to use a client loader, if you want to fetch data on the client side.
// This can be useful when you want to granularly cache data separately from the server loader.
// Warm (discovered) client loaders will run parallel to server loaders.
// Cold (undiscovered) client loaders will run serially after server loaders
// exactly once, after which they will be warm and always run parallel.
const useHomeClientLoaderData = addClientLoader("/_index", async (props) => {
	// If you need data from the server loader, you can await the serverDataPromise:
	// const serverData = await props.serverDataPromise;

	const usernameRes = await api.query({
		pattern: "/get-username",
		// Optional: pass the abort signal to cancel the dependent
		// API request if the underlying navigation is aborted
		requestInit: { signal: props.signal },
	});

	if (!usernameRes.success) {
		throw new Error("Failed to fetch username");
	}

	return `Hello, ${usernameRes.data}`;
});

export function Home(props: RouteProps<"/_index">) {
	const data = useLoaderData(props);
	const clientData = useHomeClientLoaderData(props);

	return (
		<div style={{.StylePropOpen}} {{.BackgroundColorKey}}: "blue", padding: "4px 24px" {{.StylePropClose}}>
			<h1>Home</h1>
			<p>{data{{.Call}}}</p>
			<p>{clientData{{.Call}}}</p>

			{/* RENDERS CHILDREN */}
			<props.Outlet />
		</div>
	);
}
