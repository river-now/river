/**********************************************************************
/ Generated by tsgen. DO NOT EDIT.
/*********************************************************************/

/**********************************************************************
/ Collection:
/*********************************************************************/

const routes = [
	{
		_type: "loader",
		isRootData: true,
		pattern: "",
		phantomOutputType: null as unknown as string,
	},
	{
		_type: "loader",
		pattern: "/",
		phantomOutputType: null as unknown as string,
	},
] as const;

/**********************************************************************
/ Extra TS Code:
/*********************************************************************/

export type RiverLoader = Extract<(typeof routes)[number], { _type: "loader" }>;
export type RiverLoaders = { [K in RiverLoaderPattern]: Extract<RiverLoader, { pattern: K }>; };
export type RiverLoaderPattern = RiverLoader["pattern"];
export type RiverLoaderOutput<T extends RiverLoaderPattern> = Extract<RiverLoader, { pattern: T }>["phantomOutputType"];
export type RiverRootData = Extract<(typeof routes)[number], { isRootData: true }>["phantomOutputType"];

export const ACTIONS_ROUTER_MOUNT_ROOT = "/river-api/";

/**********************************************************************
/ River Vite Plugin:
/*********************************************************************/

import type { Plugin } from "vite";

const rollupOptions = {
	input: [
		"./ts/entry.tsx",
		"ts/app.tsx",
		"ts/root.tsx",
	] as string[],
	preserveEntrySignatures: "exports-only",
	output: {
		assetFileNames: "river_out_[name]-[hash][extname]",
		chunkFileNames: "river_out_[name]-[hash].js",
		entryFileNames: "river_out_[name]-[hash].js",
	},
} as const;

const publicFileMap = {
	"desktop.svg": "desktop_eebc981612eb.svg",
	"full-logo.svg": "full-logo_e0ea7a3d3cf2.svg",
	"logo.svg": "logo_d9b0e1618362.svg",
	"moon.svg": "moon_7e0c08985ebe.svg",
	"sun.svg": "sun_338b26f6045d.svg"
} as const;

export type StaticPublicAsset = keyof typeof publicFileMap;

declare global {
	function hashedURL(staticPublicAsset: StaticPublicAsset): string;
}

export function riverVitePlugin(): Plugin {
	return {
		name: "river-vite-plugin",
		config(c) {
			const mp = c.build?.modulePreload;
			const roi = c.build?.rollupOptions?.input;
			const ign = c.server?.watch?.ignored;
			const dedupe = c.resolve?.dedupe;

			return {
				...c,
				build: {
					target: "es2022",
					...c.build,
					modulePreload: { 
						polyfill: false,
						...(typeof mp === "object" ? mp : {}),
					},
					rollupOptions: {
						...c.build?.rollupOptions,
						...rollupOptions,
						input: [
							...rollupOptions.input,
							...(Array.isArray(roi) ? roi : []),
						],
					},
				},
				server: {
					...c.server,
					headers: {
						...c.server?.headers,
						// ensure versions of dynamic imports without the latest
						// hmr updates are not cached by the browser during dev
						"cache-control": "no-store",
					},
					watch: {
						...c.server?.watch,
						ignored: [
							...(Array.isArray(ign) ? ign : []),
							...[
								"**/*.go",
								"**/static/private",
								"**/go/app/kiruna.config.json",
								"**/ts/river.gen.ts",
								"**/ts/routes.ts"
							],
						],
					},
				},
				resolve: {
					...c.resolve,
					dedupe: [
						...(Array.isArray(dedupe) ? dedupe : []),
						...["solid-js","solid-js/web"]
					],
				},
			};
		},
		transform(code, id) {
			const isNodeModules = /node_modules/.test(id);
			if (isNodeModules) return null;
			const assetRegex = /hashedURL\s*\(\s*(["'`])(.*?)\1\s*\)/g;
			const needsReplacement = assetRegex.test(code);
			if (!needsReplacement) return null;
			const replacedCode = code.replace(
				assetRegex,
				(original, _, assetPath) => {
					const hashed = (publicFileMap as Record<string, string>)[assetPath];
					if (!hashed) return '\"' + assetPath + '\"';
					return `"/public/${hashed}"`;
				},
			);
			if (replacedCode === code) return null;
			return replacedCode;
		},
	};
}
