{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"type": "object",
	"description": "Kiruna configuration schema.",
	"required": [
		"Core"
	],
	"properties": {
		"Core": {
			"type": "object",
			"description": "Required object. All paths should be set relative to the directory from which you run commands.",
			"required": [
				"DevBuildHook",
				"ProdBuildHook",
				"AppEntry",
				"DistDir"
			],
			"allOf": [
				{
					"if": {
						"properties": {
							"ServerOnlyMode": {
								"enum": [
									false
								]
							}
						}
					},
					"then": {
						"required": [
							"StaticAssetDirs"
						]
					}
				}
			],
			"properties": {
				"DevBuildHook": {
					"type": "string",
					"description": "Required string. Command to run to build your app in dev mode.\n\nExample: \"go run ./backend/cmd/build -dev\"",
					"examples": [
						"go run ./backend/cmd/build -dev"
					]
				},
				"ProdBuildHook": {
					"type": "string",
					"description": "Required string. Command to run to build your app in prod mode.\n\nExample: \"go run ./backend/cmd/build\"",
					"examples": [
						"go run ./backend/cmd/build"
					]
				},
				"AppEntry": {
					"type": "string",
					"description": "Required string. Path to your app's main.go entry file (or its parent directory).\n\nExamples: \"./cmd/app/main.go\" or \"./cmd/app\"",
					"examples": [
						"./cmd/app/main.go",
						"./cmd/app"
					]
				},
				"DistDir": {
					"type": "string",
					"description": "Required string. Must be unique from \"Core.StaticAssetDirs.Private\" and \"Core.StaticAssetDirs.Public\"\n\nExample: \"./dist\"",
					"examples": [
						"./dist"
					]
				},
				"StaticAssetDirs": {
					"type": "object",
					"description": "This object is required unless you are in ServerOnlyMode.",
					"required": [
						"Private",
						"Public"
					],
					"properties": {
						"Private": {
							"type": "string",
							"description": "Required string. Must be unique from \"Core.DistDir\" and \"Core.StaticAssetDirs.Public\"\n\nExample: \"./static/private\"",
							"examples": [
								"./static/private"
							]
						},
						"Public": {
							"type": "string",
							"description": "Required string. Must be unique from \"Core.DistDir\" and \"Core.StaticAssetDirs.Private\"\n\nExample: \"./static/public\"",
							"examples": [
								"./static/public"
							]
						}
					}
				},
				"CSSEntryFiles": {
					"type": "object",
					"description": "Optional object. Use this if you are using Kiruna's CSS features.",
					"properties": {
						"Critical": {
							"type": "string",
							"description": "Optional string. Path to your critical CSS entry file.\n\nExample: \"./styles/main.critical.css\"",
							"examples": [
								"./styles/main.critical.css"
							]
						},
						"NonCritical": {
							"type": "string",
							"description": "Optional string. Path to your non-critical CSS entry file.\n\nExample: \"./styles/main.css\"",
							"examples": [
								"./styles/main.css"
							]
						}
					}
				},
				"PublicPathPrefix": {
					"type": "string",
					"description": "Required string. Path prefix for your public assets. Must both start and end with a \"/\".\n\nExample: \"/public/\"",
					"examples": [
						"/public/"
					]
				},
				"ServerOnlyMode": {
					"type": "boolean",
					"description": "Optional boolean. If true, skips static asset processing/serving and browser reloading.\n\nDefault: false",
					"default": false
				}
			}
		},
		"Vite": {
			"type": "object",
			"description": "Optional object. Vite settings.",
			"required": [
				"JSPackageManagerBaseCmd"
			],
			"properties": {
				"JSPackageManagerBaseCmd": {
					"type": "string",
					"description": "Required string. Base command to run Vite using your preferred package manager. This is not the command to run package.json scripts, but rather the command to run standalone CLIs (e.g., \"npx\", not \"npm run\").\n\nExamples: \"npx\", \"pnpm\", \"yarn\", or \"bunx\"",
					"examples": [
						"npx",
						"pnpm",
						"yarn",
						"bunx"
					]
				},
				"JSPackageManagerCmdDir": {
					"type": "string",
					"description": "Optional string. Directory to run the package manager command from. For example, if you're running commands from \".\", but you want to run Vite from \"./frontend\", set this to \"./frontend\".\n\nDefault: \".\"\n\nExample: \"./frontend\"",
					"default": ".",
					"examples": [
						"./frontend"
					]
				},
				"DefaultPort": {
					"type": "number",
					"description": "Optional number. Default port to use for Vite. This is used when you run \"kiruna dev\" without specifying a port.\n\nDefault: 5173",
					"default": 5173
				},
				"ViteConfigFile": {
					"type": "string",
					"description": "Optional string. Path to your Vite config file if it is in a non-standard location. Should be set relative to the JSPackageManagerCmdDir, if set, otherwise your current working directory.\n\nExample: \"./configs/vite.ts\"",
					"examples": [
						"./configs/vite.ts"
					]
				}
			}
		},
		"Watch": {
			"type": "object",
			"description": "Optional object. WatchRoot is the outermost directory to watch for changes in, and your dev config watched files will be set relative to this directory.",
			"properties": {
				"WatchRoot": {
					"type": "string",
					"description": "Optional string. The directory against which all watch settings paths are relative. If not set, all paths are relative to the directory from which you run commands.\n\nDefault: \".\"",
					"default": "."
				},
				"HealthcheckEndpoint": {
					"type": "string",
					"description": "Optional string. Path to your app's healthcheck endpoint. Must return 200 OK if healthy. During dev-time rebuilds and restarts, this endpoint will be polled to determine when your app is ready to begin serving normal requests.\n\nDefault: \"/\"\n\nExample: \"/healthz\"",
					"default": "/",
					"examples": [
						"/healthz"
					]
				},
				"Include": {
					"type": "array",
					"description": "Optional array. This is where you tell the dev server what to watch for, and what to do when it detects a change.",
					"items": {
						"type": "object",
						"description": "Optional object.",
						"required": [
							"Pattern"
						],
						"properties": {
							"Pattern": {
								"type": "string",
								"description": "Required string. Glob pattern for matching files (set relative to WatchRoot)."
							},
							"OnChangeHooks": {
								"type": "array",
								"description": "Optional array. Commands to run when a file matching the pattern changes. By default, onchange commands will run before any Kiruna processing. As long as \"SkipRebuildingNotification\" is false (default), Kiruna will send a signal to the browser to show the \"Rebuilding...\" status message first. The default Timing is \"pre\". You can also change the Timing to \"post\", \"concurrent\", or \"concurrent-no-wait\" if desired.",
								"items": {
									"type": "object",
									"description": "Optional object.",
									"required": [
										"Cmd"
									],
									"properties": {
										"Cmd": {
											"type": "string",
											"description": "Required string. Command to run when a file matching the pattern changes.\n\nExample: \"echo 'File changed!'\"",
											"examples": [
												"echo 'File changed!'"
											]
										},
										"Timing": {
											"type": "string",
											"description": "Optional string. Timing of the given command relative to rebuilding the Kiruna file system.\n\nDefault: \"pre\"",
											"default": "pre",
											"enum": [
												"pre",
												"post",
												"concurrent",
												"concurrent-no-wait"
											]
										},
										"Exclude": {
											"type": "array",
											"description": "Optional array. Glob patterns for files to exclude from the onchange command (set relative to WatchRoot).",
											"items": {
												"type": "string",
												"description": "Optional string."
											}
										}
									}
								}
							},
							"RecompileGoBinary": {
								"type": "boolean",
								"description": "Optional boolean. Use this if you need the Go binary recompiled before the browser is reloaded.\n\nDefault: false",
								"default": false
							},
							"RestartApp": {
								"type": "boolean",
								"description": "Optional boolean. Use this if you explicitly need the app to be restarted before reloading the browser. Example: You might need this if you memory cache template files on first hit, in which case you would want to restart the app to reset the cache.\n\nDefault: false",
								"default": false
							},
							"RunClientDefinedRevalidateFunc": {
								"type": "boolean",
								"description": "Optional boolean. If set to true, everything will behave the same, except that instead of doing a hard reload of the browser window via \"window.location.reload()\", Kiruna will instead run a method called \"__kirunaRevalidate\" (if it exists on the window object). For example, your framework might provide you with a client-side revalidate function in order to maintain client state, in which case you'd set \"window.__kirunaRevalidate\" to that function, and set this field to true.\n\nDefault: false",
								"default": false
							},
							"RunOnChangeOnly": {
								"type": "boolean",
								"description": "Optional boolean. Use this if your onChange saves a file that will trigger another reload process, or if you need this behavior for any other reason. Will not reload the browser. Note that if you use this setting, you should not set an explicit Timing on the OnChangeHooks (or set them explicitly to \"pre\"). If you set them to \"post\", \"concurrent\", or \"concurrent-no-wait\" while using RunOnChangeOnly, the onchange commands will not run.\n\nDefault: false",
								"default": false
							},
							"SkipRebuildingNotification": {
								"type": "boolean",
								"description": "Optional boolean. Use this if you are using RunOnChangeOnly, but your onchange won't actually trigger another reload process (so you dont get stuck with \"Rebuilding...\" showing in the browser)\n\nDefault: false",
								"default": false
							},
							"TreatAsNonGo": {
								"type": "boolean",
								"description": "Optional boolean. This may come into play if you have a .go file that is totally independent from your app, such as a wasm file that you are building with a separate build process and serving from your app. If you set this to true, processing on any captured .go file will be as though it were an arbitrary non-Go file extension. Only relevant for Go files (for non-Go files, this is a no-op).\n\nDefault: false",
								"default": false
							}
						}
					}
				},
				"Exclude": {
					"type": "object",
					"description": "Optional object. Glob patterns for files and directories to exclude from the watcher (set relative to WatchRoot). This is for carving out exceptions from your Include list.",
					"properties": {
						"Dirs": {
							"type": "array",
							"description": "Optional array. Glob patterns for directories to exclude from the watcher (set relative to WatchRoot).",
							"items": {
								"type": "string",
								"description": "Optional string."
							}
						},
						"Files": {
							"type": "array",
							"description": "Optional array. Glob patterns for files to exclude from the watcher (set relative to WatchRoot).",
							"items": {
								"type": "string",
								"description": "Optional string."
							}
						}
					}
				}
			}
		}
	}
}
